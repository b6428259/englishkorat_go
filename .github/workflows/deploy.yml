name: Build & Deploy

on:
  push:
    branches: ["main"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: b6428259/englishkorat
  AWS_REGION: ap-southeast-1
  STAGE: production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Create GitHub repo secrets DOCKERHUB_USERNAME / DOCKERHUB_TOKEN first
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          # Create GitHub repo secrets: SSH_HOST, SSH_USER, SSH_KEY (private key contents)
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            REPO_DIR=/opt/englishkorat
            if [ ! -d "$REPO_DIR" ]; then
              sudo mkdir -p "$REPO_DIR"
              sudo chown $USER:$USER "$REPO_DIR"
            fi
            cd "$REPO_DIR"
            if [ ! -d .git ]; then
              # Not a git repo: initialize and fetch the branch safely
              git init
              git remote add origin https://github.com/${{ github.repository }} || true
              # Try shallow fetch and checkout main
              if git fetch --depth=1 origin main; then
                git checkout -f -B main FETCH_HEAD
              else
                # Fallback: clone into temp and copy
                TMPDIR=$(mktemp -d)
                git clone --depth 1 https://github.com/${{ github.repository }} "$TMPDIR"
                rsync -a --delete "$TMPDIR/" "$REPO_DIR/"
                rm -rf "$TMPDIR"
              fi
            else
              git fetch origin main
              git reset --hard origin/main
            fi
            export GITHUB_SHA=${{ github.sha }}
            bash deploy/remote-deploy.sh

      - name: Post disk usage
        if: always()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: df -h /
