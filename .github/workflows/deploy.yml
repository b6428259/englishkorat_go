name: build-and-deploy

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: b6428259/englishkorat
  AWS_REGION: ap-southeast-1
  STAGE: production
  LIGHT_DEPLOY: "true"   # set to false for a one-time full sync (repo files)
  DEPLOY_DIR: /opt/englishkorat

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=
            type=sha,format=short  # keep legacy sha-<short> form as backup

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Derive short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: false
          script: |
            set -euo pipefail
            IMAGE_NAME='${{ env.IMAGE_NAME }}'
            IMAGE_TAG='${{ steps.vars.outputs.SHORT_SHA }}'
            LIGHT='${{ env.LIGHT_DEPLOY }}'
            AWS_REGION='${{ env.AWS_REGION }}'
            STAGE='${{ env.STAGE }}'
            REPO_DIR='${{ env.DEPLOY_DIR }}'
            HEALTH_URL="http://localhost:3000/health"
            LAST_TAG_FILE=".last_successful_image"
            mkdir -p "$REPO_DIR"
            cd "$REPO_DIR"

            trap 'rc=$?; set +x; echo "--- FAILURE DIAGNOSTICS (rc=$rc) ---" >&2; docker ps >&2 || true; docker logs --tail 40 englishkorat-api >&2 || true; docker logs --tail 20 ekorat-redis >&2 || true; echo "--- END DIAGNOSTICS ---" >&2; exit $rc' ERR

            # If mkdir failed due to permission (silent because of set -e), redo with sudo and take ownership.
            if [ ! -d "$REPO_DIR" ]; then
              echo "[WARN] Initial mkdir failed (permission?). Retrying with sudo..." >&2
              sudo mkdir -p "$REPO_DIR" || { echo "FATAL: cannot create $REPO_DIR" >&2; exit 1; }
            fi
            if [ ! -w "$REPO_DIR" ]; then
              echo "[INFO] Adjusting ownership of $REPO_DIR for user $USER" >&2
              sudo chown "$USER":"$USER" "$REPO_DIR" || true
            fi
            cd "$REPO_DIR"

            if [ -w . ]; then WRITABLE=yes; else WRITABLE=no; fi
            NOW=$(date -u +%H:%M:%S)
            echo "Runtime info: user=$(whoami) pwd=$PWD writeable=$WRITABLE date=$NOW" >&2
            echo "Using IMAGE_NAME=$IMAGE_NAME IMAGE_TAG=$IMAGE_TAG LIGHT=$LIGHT" >&2
            echo "--- BEGIN TRACE ---" >&2
            set -x

            echo "Branch select on LIGHT=$LIGHT" >&2
            set +e
            TEST_VAL="$LIGHT"
            set -e
            if [ "$TEST_VAL" = "false" ]; then
              echo "[FULL DEPLOY] Syncing repository (one-time)" >&2
              if [ -d .git ]; then
                git fetch origin main && git reset --hard origin/main
              else
                rm -rf tmp_clone && git clone https://github.com/${{ github.repository }} tmp_clone
                cp -a tmp_clone/. .
                rm -rf tmp_clone
              fi
            else
              echo "[LIGHT DEPLOY] Skipping repo sync; using existing compose + scripts" >&2
            fi

            # Ensure curl or wget exists for fetch & health
            if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
              (sudo apt-get update -y && sudo apt-get install -y curl) || true
            fi

            # Fetch compose file on light deploy if missing (single-file fetch)
            if [ "$LIGHT" = "true" ]; then
              if [ ! -f docker-compose.production.yml ]; then
                RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/docker-compose.production.yml"
                echo "[LIGHT DEPLOY] Fetching compose file from repository: $RAW_URL" >&2
                (curl -fsSL "$RAW_URL" -o docker-compose.production.yml || wget -qO docker-compose.production.yml "$RAW_URL") \
                  || { echo "ERROR: Failed to fetch docker-compose.production.yml" >&2; exit 1; }
              else
                echo "[LIGHT DEPLOY] Found existing docker-compose.production.yml" >&2
              fi
              # Always refresh generate-env.sh to avoid stale version on the host
              mkdir -p deploy
              RAW_GEN_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/deploy/generate-env.sh"
              echo "[LIGHT DEPLOY] Refreshing generate-env.sh: $RAW_GEN_URL" >&2
              (curl -fsSL "$RAW_GEN_URL" -o deploy/generate-env.sh || wget -qO deploy/generate-env.sh "$RAW_GEN_URL") || echo "WARN: could not fetch generate-env.sh" >&2
              chmod +x deploy/generate-env.sh 2>/dev/null || true
            fi

            # Final check compose exists
            if [ ! -f docker-compose.production.yml ]; then
              echo "ERROR: docker-compose.production.yml still missing." >&2
              exit 1
            fi

            # Regenerate .env if generator exists
            if [ -x deploy/generate-env.sh ]; then
              echo "Generating .env from SSM" >&2
              # Export AWS creds if repository secrets provided (optional)
              if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'; fi
              if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'; fi
              if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then export AWS_SESSION_TOKEN='${{ secrets.AWS_SESSION_TOKEN }}'; fi
              # Ensure region and stage are exported to child process (and AWS_DEFAULT_REGION for CLI)
              export AWS_REGION
              export AWS_DEFAULT_REGION="$AWS_REGION"
              export STAGE
              export SSM_BASE_PATH="/englishkorat"
              echo "Preflight: checking AWS identity" >&2
              if ! aws sts get-caller-identity >/dev/null 2>&1; then
                echo "ERROR: AWS credentials not available in this session. Aborting before env generation." >&2
                exit 1
              fi
              if ! bash deploy/generate-env.sh; then
                echo "ERROR: generate-env.sh failed; aborting deployment before container restart" >&2
                exit 1
              fi
            else
              echo "WARN: deploy/generate-env.sh not found or not executable; using existing .env" >&2
            fi

            # Determine previous tag for rollback
            PREVIOUS_TAG=""
            if [ -f "$LAST_TAG_FILE" ]; then
              PREVIOUS_TAG=$(cat "$LAST_TAG_FILE" || true)
            fi
            if [ -z "$PREVIOUS_TAG" ]; then
              PREV_IMG=$(docker ps --filter "name=englishkorat-api" --format '{{.Image}}' | head -n1 || true)
              PREVIOUS_TAG=${PREV_IMG##*:}
              [ "$PREVIOUS_TAG" = "$PREV_IMG" ] && PREVIOUS_TAG="" || true
            fi
            echo "Previous successful tag: ${PREVIOUS_TAG:-<none>}" >&2

            echo "Pulling primary tag ${IMAGE_NAME}:${IMAGE_TAG}" >&2
            if ! docker pull "${IMAGE_NAME}:${IMAGE_TAG}"; then
              echo "Primary tag not found, trying sha-${IMAGE_TAG}" >&2
              if docker pull "${IMAGE_NAME}:sha-${IMAGE_TAG}"; then
                IMAGE_TAG="sha-${IMAGE_TAG}"
                echo "Using fallback tag $IMAGE_TAG" >&2
              else
                echo "Fallback sha-${IMAGE_TAG} not found, trying latest" >&2
                docker pull "${IMAGE_NAME}:latest" || true
                IMAGE_TAG=latest
              fi
            fi
            echo "Launching stack (candidate tag=${IMAGE_TAG})" >&2
            # Source .env for docker-compose variable expansion
            set -a; source .env; set +a
            # Override USE_SSM to false so app uses env vars instead of SSM
            export USE_SSM=false
            IMAGE_TAG=${IMAGE_TAG} docker compose -f docker-compose.production.yml up -d --remove-orphans

            # Quick debug: show that .env was created with content
            echo "=== DEBUG: Checking .env file ===" >&2
            ls -la .env >&2 || echo "No .env file found" >&2
            echo "First 5 lines of .env:" >&2
            head -5 .env >&2 || echo "Cannot read .env" >&2
            echo "DB_PASSWORD value:" >&2
            grep "^DB_PASSWORD=" .env >&2 || echo "DB_PASSWORD not found in .env" >&2
            echo "Testing variable expansion:" >&2
            echo "DB_PASSWORD=${DB_PASSWORD}" >&2
            echo "USE_SSM=${USE_SSM}" >&2
            echo "=== CONTAINER ENV CHECK ===" >&2
            sleep 2  # Give container time to start
            docker exec englishkorat-api printenv | grep -E "DB_PASSWORD|USE_SSM|APP_ENV" | sort >&2 || echo "Container env check failed" >&2
            echo "================================" >&2

            echo "Running health check: $HEALTH_URL" >&2
            HEALTH_OK=0
            for i in $(seq 1 15); do
              if curl -fsS --max-time 2 "$HEALTH_URL" >/dev/null 2>&1 || wget -qO- "$HEALTH_URL" >/dev/null 2>&1; then
                echo "Health OK (attempt $i)" >&2
                HEALTH_OK=1
                break
              fi
              STATUS=$(docker inspect --format '{{if .State.Health}}{{.State.Health.Status}}{{else}}unknown{{end}}' englishkorat-api 2>/dev/null || echo unknown)
              echo "Attempt $i: not healthy yet (container health=$STATUS)" >&2
              sleep 4
            done

            if [ $HEALTH_OK -ne 1 ]; then
              echo "UNHEALTHY deployment - checking logs before rollback" >&2
              echo "=== API LOGS ===" >&2
              docker logs --tail 30 englishkorat-api >&2 || true
              echo "=== API ENV VARS ===" >&2
              docker exec englishkorat-api printenv | grep -E "DB_|REDIS_|JWT_|AWS_|PORT|APP_ENV" | sort >&2 || true
              echo "=== REDIS LOGS ===" >&2  
              docker logs --tail 10 ekorat-redis >&2 || true
              echo "=== CONTAINER STATUS ===" >&2
              docker ps --filter "name=englishkorat" >&2 || true
              echo "================" >&2
              echo "UNHEALTHY deployment - initiating rollback" >&2
              if [ -n "$PREVIOUS_TAG" ]; then
                echo "Rolling back to tag $PREVIOUS_TAG" >&2
                IMAGE_TAG=$PREVIOUS_TAG docker compose -f docker-compose.production.yml up -d --remove-orphans || true
              else
                echo "No previous tag to rollback to." >&2
              fi
              exit 1
            fi

            echo "$IMAGE_TAG" > "$LAST_TAG_FILE"
            echo "Deployment successful (tag=$IMAGE_TAG)" >&2
            docker image prune -f || true

      - name: Disk usage after deploy
        if: always()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            df -h /
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
