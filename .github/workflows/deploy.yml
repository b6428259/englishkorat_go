name: build-and-deploy

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: b6428259/englishkorat
  AWS_REGION: ap-southeast-1
  STAGE: production
  LIGHT_DEPLOY: "true"   # set to false for a one-time full sync (repo files)

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Derive short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail
            IMAGE_NAME='${{ env.IMAGE_NAME }}'
            IMAGE_TAG='${{ steps.vars.outputs.SHORT_SHA }}'
            LIGHT='${{ env.LIGHT_DEPLOY }}'
            AWS_REGION='${{ env.AWS_REGION }}'
            STAGE='${{ env.STAGE }}'
            REPO_DIR=/opt/englishkorat
            mkdir -p "$REPO_DIR"
            cd "$REPO_DIR"

            if [ "$LIGHT" = "false" ]; then
              echo "[FULL DEPLOY] Syncing repository (one-time)" >&2
              if [ -d .git ]; then
                git fetch origin main && git reset --hard origin/main
              else
                rm -rf tmp_clone && git clone https://github.com/${{ github.repository }} tmp_clone
                cp -a tmp_clone/. .
                rm -rf tmp_clone
              fi
            else
              echo "[LIGHT DEPLOY] Skipping repo sync; using existing compose + scripts" >&2
            fi

            # Fetch compose file on light deploy if missing (single-file fetch)
            if [ "$LIGHT" = "true" ]; then
              if [ ! -f docker-compose.production.yml ]; then
                RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/docker-compose.production.yml"
                echo "[LIGHT DEPLOY] Fetching compose file from repository: $RAW_URL" >&2
                (curl -fsSL "$RAW_URL" -o docker-compose.production.yml || wget -qO docker-compose.production.yml "$RAW_URL") \
                  || { echo "ERROR: Failed to fetch docker-compose.production.yml" >&2; exit 1; }
              else
                echo "[LIGHT DEPLOY] Found existing docker-compose.production.yml" >&2
              fi
            fi

            # Final check compose exists
            if [ ! -f docker-compose.production.yml ]; then
              echo "ERROR: docker-compose.production.yml still missing." >&2
              exit 1
            fi

            # Regenerate .env if generator exists
            if [ -x deploy/generate-env.sh ]; then
              echo "Generating .env from SSM" >&2
              bash deploy/generate-env.sh || echo "WARN: generate-env.sh failed; continuing" >&2
            else
              echo "WARN: deploy/generate-env.sh not found or not executable; using existing .env" >&2
            fi

            echo "Pulling ${IMAGE_NAME}:${IMAGE_TAG}" >&2
            docker pull "${IMAGE_NAME}:${IMAGE_TAG}" || true
            echo "Launching stack (tag=${IMAGE_TAG})" >&2
            IMAGE_TAG=${IMAGE_TAG} docker compose -f docker-compose.production.yml up -d --remove-orphans
            docker image prune -f || true

      - name: Disk usage after deploy
        if: always()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            df -h /
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
