name: deploy-production

on:
  push:
    branches: ["Production"]
  workflow_dispatch:

env:
  IMAGE_NAME: b6428259/englishkorat
  AWS_REGION: ap-southeast-1
  STAGE: production
  LIGHT_DEPLOY: "true"   # change to false to force full repo sync once
  DEPLOY_DIR: /opt/englishkorat

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=
            type=sha,format=short

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Derive short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Deploy over SSH (production)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
            
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          script_stop: false
          script: |
            set -euo pipefail
            IMAGE_NAME='${{ env.IMAGE_NAME }}'
            IMAGE_TAG='${{ steps.vars.outputs.SHORT_SHA }}'
            LIGHT='${{ env.LIGHT_DEPLOY }}'
            AWS_REGION='${{ env.AWS_REGION }}'
            STAGE='${{ env.STAGE }}'
            REPO_DIR='${{ env.DEPLOY_DIR }}'
            HEALTH_URL="http://localhost:3000/health"
            LAST_TAG_FILE=".last_successful_image"
            mkdir -p "$REPO_DIR"
            cd "$REPO_DIR"

            trap 'rc=$?; set +x; echo "--- FAILURE DIAGNOSTICS (rc=$rc) ---" >&2; docker ps >&2 || true; docker logs --tail 50 englishkorat-api >&2 || true; echo "--- END DIAGNOSTICS ---" >&2; exit $rc' ERR

            if [ ! -d "$REPO_DIR" ]; then
              sudo mkdir -p "$REPO_DIR" || { echo "FATAL: cannot create $REPO_DIR" >&2; exit 1; }
            fi
            if [ ! -w "$REPO_DIR" ]; then
              sudo chown "$USER":"$USER" "$REPO_DIR" || true
            fi
            cd "$REPO_DIR"

            set -x
            COMPOSE_FILE=docker-compose.production.yml
            if [ "$LIGHT" = "false" ]; then
              if [ -d .git ]; then
                git fetch origin Production && git reset --hard origin/Production || true
              else
                rm -rf tmp_clone && git clone https://github.com/${{ github.repository }} -b Production tmp_clone
                cp -a tmp_clone/. . && rm -rf tmp_clone
              fi
            else
              RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/${COMPOSE_FILE}"
              # Ensure fetch tool (curl/wget) available (Amazon Linux vs Ubuntu vs Alpine)
              if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
                if command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y curl || true; fi
                if command -v dnf >/dev/null 2>&1; then sudo dnf -y install curl || true; fi
                if command -v yum >/dev/null 2>&1; then sudo yum -y install curl || true; fi
                if command -v apk >/dev/null 2>&1; then sudo apk add --no-cache curl || true; fi
                if command -v microdnf >/dev/null 2>&1; then sudo microdnf install -y curl || true; fi
              fi
              curl -fsSL "$RAW_URL" -o "$COMPOSE_FILE" || wget -qO "$COMPOSE_FILE" "$RAW_URL"
              mkdir -p deploy
              for f in fallback-write-env.sh host-cleanup.sh; do
                curl -fsSL "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/deploy/$f" -o deploy/$f || wget -qO deploy/$f "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/deploy/$f" || true
              done
              chmod +x deploy/*.sh 2>/dev/null || true
            fi

            # Export production secrets (namespaced with PROD_*)
            export PROD_DB_HOST='${{ secrets.PROD_DB_HOST }}'
            export PROD_DB_PORT='${{ secrets.PROD_DB_PORT }}'
            export PROD_DB_USER='${{ secrets.PROD_DB_USER }}'
            export PROD_DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}'
            export PROD_DB_NAME='${{ secrets.PROD_DB_NAME }}'
            export PROD_REDIS_HOST='${{ secrets.PROD_REDIS_HOST }}'
            export PROD_REDIS_PORT='${{ secrets.PROD_REDIS_PORT }}'
            export PROD_REDIS_PASSWORD='${{ secrets.PROD_REDIS_PASSWORD }}'
            export LINE_CHANNEL_SECRET='${{ secrets.PROD_LINE_CHANNEL_SECRET }}'
            export LINE_CHANNEL_ACCESS_TOKEN='${{ secrets.PROD_LINE_CHANNEL_ACCESS_TOKEN }}'
            export JWT_SECRET='${{ secrets.PROD_JWT_SECRET }}'
            export JWT_EXPIRES_IN='${{ secrets.PROD_JWT_EXPIRES_IN }}'
            export AWS_ACCESS_KEY_ID='${{ secrets.PROD_AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}'
            export S3_BUCKET_NAME='${{ secrets.PROD_S3_BUCKET_NAME }}'
            export APP_ENV=production
            export STAGE=production
            export AWS_REGION

            if [ -x deploy/fallback-write-env.sh ]; then
              bash deploy/fallback-write-env.sh
            else
              echo "ERROR: fallback-write-env.sh missing" >&2; exit 1
            fi

            # Remove conflicting containers
            for CN in ekorat-redis; do
              if docker ps -a --format '{{.Names}}' | grep -xq "$CN"; then
                docker rm -f "$CN" || true
              fi
            done

            PREVIOUS_TAG=""
            if [ -f "$LAST_TAG_FILE" ]; then PREVIOUS_TAG=$(cat "$LAST_TAG_FILE" || true); fi

            docker pull "${IMAGE_NAME}:${IMAGE_TAG}" || docker pull "${IMAGE_NAME}:sha-${IMAGE_TAG}" || IMAGE_TAG=latest
            set -a; source .env; set +a
            export USE_SSM=false
            IMAGE_TAG=${IMAGE_TAG} docker compose -f "$COMPOSE_FILE" up -d --remove-orphans

            HEALTH_OK=0
            for i in $(seq 1 15); do
              if curl -fsS --max-time 2 "$HEALTH_URL" >/dev/null 2>&1 || wget -qO- "$HEALTH_URL" >/dev/null 2>&1; then
                HEALTH_OK=1; break
              fi
              sleep 4
            done
            if [ $HEALTH_OK -ne 1 ]; then
              echo "Deployment unhealthy, rolling back" >&2
              if [ -n "$PREVIOUS_TAG" ]; then
                IMAGE_TAG=$PREVIOUS_TAG docker compose -f docker-compose.production.yml up -d --remove-orphans || true
              fi
              exit 1
            fi
            echo "$IMAGE_TAG" > "$LAST_TAG_FILE"
            [ -x deploy/host-cleanup.sh ] && bash deploy/host-cleanup.sh || docker image prune -f || true

      - name: Disk usage after deploy
        if: always()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            df -h /
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
