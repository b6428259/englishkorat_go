{
	"info": {
		"_postman_id": "password-reset-api-collection",
		"name": "English Korat - Password Reset API",
		"description": "API Collection สำหรับการจัดการ Password Reset ในระบบ English Korat\n\n## Features:\n- สร้าง Password Reset Token\n- Reset Password โดย Admin/Owner\n- Reset Password ด้วย Token\n- Role-based Security (Admin ไม่สามารถ reset Owner ได้)\n\n## Security Rules:\n- Admin ไม่สามารถ reset password ของ Owner ได้\n- Owner สามารถ reset password ของทุกคนได้\n- Token มีอายุ 1 ชั่วโมง\n- Password ใหม่ต้องมีอย่างน้อย 6 ตัวอักษร",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Set base URL if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}",
					"",
					"// Log the request for debugging",
					"console.log('Making request to:', pm.request.url);"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Common response tests",
					"pm.test('Response status code is valid', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 403, 404, 500]);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.expect(() => pm.response.json()).to.not.throw();",
					"});",
					"",
					"// Log response for debugging",
					"console.log('Response:', pm.response.json());"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "reset_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "target_user_id",
			"value": "3",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('auth_token', response.token);",
									"        console.log('Admin token saved to environment');",
									"        console.log('User role:', response.user.role);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "ล็อกอินด้วย Admin account เพื่อรับ JWT token สำหรับการใช้งาน Password Reset API"
					},
					"response": []
				},
				{
					"name": "Login as Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('auth_token', response.token);",
									"        console.log('Owner token saved to environment');",
									"        console.log('User role:', response.user.role);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"owner\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "ล็อกอินด้วย Owner account (มีสิทธิ์สูงสุด สามารถ reset password ของทุกคนได้)"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints สำหรับการเข้าสู่ระบบด้วย role ต่างๆ"
		},
		{
			"name": "Password Reset by Admin/Owner",
			"item": [
				{
					"name": "Generate Password Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('reset_token', response.token);",
									"        console.log('Reset token saved:', response.token);",
									"        console.log('Expires at:', response.expires_at);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{target_user_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/password-reset/generate-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"password-reset",
								"generate-token"
							]
						},
						"description": "สร้าง Password Reset Token สำหรับ user\n\n**Required Role:** admin, owner\n\n**Restrictions:**\n- Admin ไม่สามารถสร้าง token ให้ Owner ได้\n- Owner สามารถสร้าง token ให้ทุกคนได้\n\n**Token Properties:**\n- อายุ 1 ชั่วโมง\n- ใช้ได้ครั้งเดียว\n- 64 characters (hex)\n\n**Use Cases:**\n- ส่ง token ให้ user ผ่าน email\n- User สามารถ reset password เอง\n- ระบบรักษาความปลอดภัยสูง"
					},
					"response": []
				},
				{
					"name": "Reset Password by Admin (Direct)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{target_user_id}},\n    \"new_password\": \"newSecurePassword123\",\n    \"require_password_change\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/password-reset/reset-by-admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"password-reset",
								"reset-by-admin"
							]
						},
						"description": "Admin/Owner รีเซ็ตรหัสผ่านให้ user โดยตรง\n\n**Required Role:** admin, owner\n\n**Restrictions:**\n- Admin ไม่สามารถรีเซ็ต Owner password ได้\n- Owner สามารถรีเซ็ต password ของทุกคนได้\n\n**Parameters:**\n- user_id: ID ของ user ที่ต้องการรีเซ็ต\n- new_password: รหัสผ่านใหม่ (min 6 chars)\n- require_password_change: บังคับให้เปลี่ยนรหัสผ่านในครั้งต่อไป\n\n**Use Cases:**\n- รีเซ็ตรหัสผ่านเร่งด่วน\n- ตั้งรหัสผ่านชั่วคราว\n- User ลืมรหัสผ่านและต้องการเข้าใช้ทันที"
					},
					"response": []
				}
			],
			"description": "การรีเซ็ตรหัสผ่านโดย Admin และ Owner"
		},
		{
			"name": "Password Reset with Token",
			"item": [
				{
					"name": "Reset Password with Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"userChosenPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password-token"
							]
						},
						"description": "User ใช้ token เพื่อรีเซ็ตรหัสผ่านเอง (Public endpoint)\n\n**No Authentication Required** - Public endpoint\n\n**Parameters:**\n- token: Token ที่ได้รับจาก admin\n- new_password: รหัสผ่านใหม่ที่ user เลือก (min 6 chars)\n\n**Token Validation:**\n- ต้องตรงกับที่เก็บไว้ในฐานข้อมูล\n- ต้องยังไม่หมดอายุ (1 ชั่วโมง)\n- หลังใช้แล้ว token จะถูกลบทันที\n\n**Process:**\n1. ตรวจสอบ token และอายุ\n2. Hash password ใหม่\n3. อัพเดทรหัสผ่าน\n4. ลบ token\n5. บันทึก log"
					},
					"response": []
				}
			],
			"description": "การรีเซ็ตรหัสผ่านด้วย token (สำหรับ user)"
		},
		{
			"name": "Test Cases & Examples",
			"item": [
				{
					"name": "Test: Admin tries to reset Owner (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin cannot reset owner password', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.include('Admin cannot reset owner password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/password-reset/generate-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"password-reset",
								"generate-token"
							]
						},
						"description": "ทดสอบว่า Admin ไม่สามารถสร้าง reset token ให้ Owner ได้\n\n**Expected Result:** 403 Forbidden\n**Error Message:** \"Admin cannot reset owner password\"\n\n**Prerequisites:**\n- ต้อง login ด้วย admin account ก่อน\n- user_id = 1 ต้องเป็น owner role"
					},
					"response": []
				},
				{
					"name": "Test: Invalid Token Reset (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid token should fail', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.include('Invalid or expired reset token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"invalid_token_12345\",\n    \"new_password\": \"testPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password-token"
							]
						},
						"description": "ทดสอบการใช้ token ที่ไม่ถูกต้อง\n\n**Expected Result:** 400 Bad Request\n**Error Message:** \"Invalid or expired reset token\"\n\n**Test Cases:**\n- Token ที่ไม่มีอยู่\n- Token ที่หมดอายุ\n- Token ที่ใช้ไปแล้ว"
					},
					"response": []
				},
				{
					"name": "Test: Weak Password (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Weak password should fail', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{target_user_id}},\n    \"new_password\": \"123\",\n    \"require_password_change\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/password-reset/reset-by-admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"password-reset",
								"reset-by-admin"
							]
						},
						"description": "ทดสอบการตั้งรหัสผ่านที่อ่อนแอ\n\n**Expected Result:** 400 Bad Request\n**Reason:** Password ต้องมีอย่างน้อย 6 ตัวอักษร\n\n**Validation Rules:**\n- Minimum length: 6 characters\n- Required field\n- String type"
					},
					"response": []
				}
			],
			"description": "ตัวอย่างการทดสอบและ edge cases"
		},
		{
			"name": "Complete Workflow Examples",
			"item": [
				{
					"name": "Workflow 1: Token-based Reset",
					"item": [
						{
							"name": "Step 1: Admin generates token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    pm.environment.set('reset_token', response.token);",
											"    console.log('✅ Step 1: Token generated successfully');",
											"    console.log('Token:', response.token);",
											"} else {",
											"    console.log('❌ Step 1: Failed to generate token');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{target_user_id}}\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/password-reset/generate-token",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"password-reset",
										"generate-token"
									]
								},
								"description": "Admin สร้าง reset token ให้ user"
							},
							"response": []
						},
						{
							"name": "Step 2: User resets with token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    console.log('✅ Step 2: Password reset successful');",
											"    console.log('User can now login with new password');",
											"} else {",
											"    console.log('❌ Step 2: Password reset failed');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"userNewPassword123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/reset-password-token",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"reset-password-token"
									]
								},
								"description": "User ใช้ token เพื่อ reset password"
							},
							"response": []
						}
					],
					"description": "ขั้นตอนการ reset password ด้วย token"
				},
				{
					"name": "Workflow 2: Direct Admin Reset",
					"item": [
						{
							"name": "Direct Reset by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    console.log('✅ Direct reset successful');",
											"    console.log('User can login immediately with new password');",
											"} else {",
											"    console.log('❌ Direct reset failed');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": {{target_user_id}},\n    \"new_password\": \"adminSetPassword123\",\n    \"require_password_change\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/password-reset/reset-by-admin",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"password-reset",
										"reset-by-admin"
									]
								},
								"description": "Admin reset password โดยตรง (สำหรับกรณีเร่งด่วน)"
							},
							"response": []
						}
					],
					"description": "การ reset password โดยตรงจาก admin"
				}
			],
			"description": "ตัวอย่าง workflow ที่สมบูรณ์"
		}
	]
}
